// Code generated by MockGen. DO NOT EDIT.
// Source: ports/password_hash_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPasswordHashService is a mock of IPasswordHashService interface.
type MockIPasswordHashService struct {
	ctrl     *gomock.Controller
	recorder *MockIPasswordHashServiceMockRecorder
}

// MockIPasswordHashServiceMockRecorder is the mock recorder for MockIPasswordHashService.
type MockIPasswordHashServiceMockRecorder struct {
	mock *MockIPasswordHashService
}

// NewMockIPasswordHashService creates a new mock instance.
func NewMockIPasswordHashService(ctrl *gomock.Controller) *MockIPasswordHashService {
	mock := &MockIPasswordHashService{ctrl: ctrl}
	mock.recorder = &MockIPasswordHashServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPasswordHashService) EXPECT() *MockIPasswordHashServiceMockRecorder {
	return m.recorder
}

// HashPassword mocks base method.
func (m *MockIPasswordHashService) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockIPasswordHashServiceMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockIPasswordHashService)(nil).HashPassword), password)
}

// VerifyPassword mocks base method.
func (m *MockIPasswordHashService) VerifyPassword(password, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", password, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockIPasswordHashServiceMockRecorder) VerifyPassword(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockIPasswordHashService)(nil).VerifyPassword), password, hash)
}
